# -*- coding: utf-8 -*-
"""resume_jd_matcher.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WiiJs16mG0ODW__jAAM7mCReDuTz_XMH
"""

!pip install -q sentence-transformers

from sentence_transformers import SentenceTransformer, util
import pandas as pd

# Sample resumes
resumes = {
    "Resume A": "I have experience in Python, machine learning, and data analysis. I built ML models and worked with Pandas and NumPy.",
    "Resume B": "Skilled in SQL and Excel. I created dashboards in Tableau and generated reports for business analysis.",
    "Resume C": "Worked with deep learning models like BERT and Transformers. I'm passionate about NLP and language models."
}

# Sample job descriptions
job_descriptions = {
    "JD 1": "Looking for a Python developer with experience in machine learning and data analysis.",
    "JD 2": "Need a data analyst who knows SQL, Excel, and can create dashboards using BI tools like Tableau.",
    "JD 3": "Hiring NLP intern familiar with BERT, Transformers, and deep learning frameworks."
}

model = SentenceTransformer('all-MiniLM-L6-v2')

resume_texts = list(resumes.values())
jd_texts = list(job_descriptions.values())
resume_embeddings = model.encode(resume_texts, convert_to_tensor=True)
jd_embeddings = model.encode(jd_texts, convert_to_tensor=True)

similarity_matrix = util.cos_sim(resume_embeddings, jd_embeddings).cpu().numpy()

similarity_df = pd.DataFrame(similarity_matrix * 100, index=resumes.keys(), columns=job_descriptions.keys())
print("üîç Similarity Scores (in %):")
print(similarity_df.round(2))

print("\n‚úÖ Best JD match for each resume:")
for resume in similarity_df.index:
    best_jd = similarity_df.loc[resume].idxmax()
    score = similarity_df.loc[resume, best_jd]
    print(f"{resume} ‚û°Ô∏è {best_jd} (Score: {score:.2f}%)")